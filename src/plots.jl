using PlotlyJS: AbstractTrace, Layout, Plot, scatter

const RED = "#FF595E"
const GREEN = "#8AC926"
const BLUE = "#1982C4"

const OPACITY = 0.1

"""
    sir_plot(data)

Plots an epidemic trajectory from the provided simulation data.

**Arguments**
- `data::SimulationData`: Stores the epidemic data generated by `simulate`.

**Keyword Arguments
- `show_susceptible::Bool=true`: Indicates whether the number of susceptible individuals is
    displayed.
- `show_infected::Bool=true`: Indicates whether the number of infected individuals is
    displayed.
- `show_recovered::Bool=true`: Indicates whether the number of recovered individuals is
    displayed.
- `show_trials::Bool=true`: Indicates whether the trajectories from individual trials are
    displayed.
"""
function sir_plot(
    data::SimulationData;
    show_susceptible::Bool=true,
    show_infected::Bool=true,
    show_recovered::Bool=true,
    show_trials::Bool=true
)
    traces::Vector{AbstractTrace} = []

    # Add the susceptible traces.
    times = (0:(size(data.susceptible, 1) - 1)) / HOURS_IN_DAY
    trials = size(data.susceptible, 2)
    if show_susceptible && show_trials
        append!(traces, (scatter(
            x=times, y=susceptible, hoverinfo="skip", line_color=BLUE, mode="lines",
            opacity=OPACITY, showlegend=false
        ) for susceptible in eachcol(data.susceptible)))
    end
    if show_susceptible
        push!(traces, scatter(
            x=times, y=sum(eachcol(data.susceptible)) / trials, line_color=BLUE,
            mode="lines", name="Susceptible"
        ))
    end

    # Add the infected traces.
    times = (0:(size(data.infected, 1) - 1)) / HOURS_IN_DAY
    trials = size(data.infected, 2)
    if show_infected && show_trials
        append!(traces, (scatter(
            x=times, y=infected, hoverinfo="skip", line_color=RED, mode="lines",
            opacity=OPACITY, showlegend=false
        ) for infected in eachcol(data.infected)))
    end
    if show_infected
        push!(traces, scatter(
            x=times, y=sum(eachcol(data.infected)) / trials, line_color=RED, mode="lines",
            name="Infected"
        ))
    end

    # Add the recovered traces.
    times = (0:(size(data.recovered, 1) - 1)) / HOURS_IN_DAY
    trials = size(data.recovered, 2)
    if show_recovered && show_trials
        append!(traces, (scatter(
            x=times, y=recovered, hoverinfo="skip", line_color=GREEN, mode="lines",
            opacity=OPACITY, showlegend=false
        ) for recovered in eachcol(data.recovered)))
    end
    if show_recovered
        push!(traces, scatter(
            x=times, y=sum(eachcol(data.recovered)) / trials, line_color=GREEN,
            mode="lines", name="Recovered"
        ))
    end

    layout = Layout(
        xaxis_title="Time (days)", yaxis_range=(0, data.population),
        yaxis_title="Population"
    )

    return Plot(traces, layout)
end